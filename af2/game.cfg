// This file defines the setup script for the game "ASCII Fortress 2".
// Do not modify this file as a user. Use the autoexec files in the cfg folder to override specific settings instead.

//==============================================================================
// Cvar setup
//==============================================================================

// Game info.
game "af2"
game_name "ASCII Fortress 2"
game_version "2.0.0"
game_author "Donut the Vikingchap"
game_year 2022
game_url "https://tf2maps.net/downloads/ascii-fortress-2.3816/"

// Entry point.
main "main_menu"

// Window settings.
r_window_title $game_name
r_icon concat($game ".png")

// Default game server.
if and(streq($address default(address)) streq($port default(port))) {
	address ""
	port 25605
}

// Default meta server.
if and(streq($meta_address default(meta_address)) streq($meta_port default(meta_port))) {
	meta_address "humbug.se"
	meta_port 25600
}

// Default port when starting a game server.
if streq($sv_port default(sv_port)) {
	sv_port 25605
}

// Default port when starting a meta server.
if streq($meta_sv_port default(meta_sv_port)) {
	meta_sv_port 25600
}

// Default game server name.
if streq($sv_hostname default(sv_hostname)) {
	sv_hostname $game_name
}

// Default game server message of the day.
if streq($sv_motd default(sv_motd)) {
	sv_motd concat("Welcome to " $sv_hostname "!")
}

// Default game server map.
if streq($sv_map default(sv_map)) {
	sv_map "ctf_map1.txt"
}

// Default game server map rotation.
if streq($sv_map_rotation default(sv_map_rotation)) {
	sv_map_rotation {"ctf_map1.txt"; "pl_map2.txt"; "ctf_turbine.txt"; "ctf_zahn.txt"; "ctf_q3dm1.txt"}
}

// Export the following definitions so that they may be used outside this file.
export script {

//==============================================================================
// Aliases
//==============================================================================

// Menu command aliases.
alias main_menu "global import file menus/af2_main_menu"
alias join_menu "global import file menus/af2_join_menu"
alias server_list "global import file menus/af2_server_list_menu"
alias server_menu "global import file menus/af2_server_menu"
alias settings "global import file menus/af2_settings_menu"
alias video_settings "global import file menus/af2_video_settings_menu"
alias audio_settings "global import file menus/af2_audio_settings_menu"
alias keyboard_settings "global import file menus/af2_keyboard_settings_menu"
alias mouse_settings "global import file menus/af2_mouse_settings_menu"
alias font_settings "global import file menus/af2_font_settings_menu"
alias multiplayer_settings "global import file menus/af2_multiplayer_settings_menu"

// Game command aliases.
alias +showscores "cl_showscores 1"
alias -showscores "cl_showscores 0"

// Client-side aliases for server-side game commands.
alias noclip "fwd noclip"
alias hurtme "fwd hurtme"
alias kill "fwd kill"
alias rtv "fwd rtv"
alias motd "fwd motd"
alias points "fwd points"
alias level "fwd level"
alias hats "fwd hats"
alias teleport "fwd teleport"
alias getpos "fwd getpos"

//==============================================================================
// Joystick support
//==============================================================================

const joystick_diagonal_ratio sub(sqrt(2) 1) // Tangent of 22.5 degrees (half of 45).
var joystick_move_deadzone 0.25 // Radius of joystick deadzone for movement.
var joystick_aim_deadzone 0.5 // Radius of joystick deadzone for aiming.

var _joystick_moving 0
var _joystick_aiming 0
var _trigger_attacking1 0
var _trigger_attacking2 0

function joystick_move x y {
	if gt(hypot($x $y) $joystick_move_deadzone) {
		_joystick_moving 1
		-left; -right; -up; -down
		if gt(abs(div($x $y)) $joystick_diagonal_ratio) {
			if lt($x 0) { +left }
			else { +right }
		}
		if gt(abs(div($y $x)) $joystick_diagonal_ratio) {
			if lt($y 0) { +up }
			else { +down }
		}
	}
	elif $_joystick_moving {
		_joystick_moving 0
		-left; -right; -up; -down
	}
}

function joystick_aim x y {
	if gt(hypot($x $y) $joystick_aim_deadzone) {
		_joystick_aiming 1
		-aimleft; -aimright; -aimup; -aimdown
		if gt(abs(div($x $y)) $joystick_diagonal_ratio) {
			if lt($x 0) { +aimleft }
			else { +aimright }
		}
		if gt(abs(div($y $x)) $joystick_diagonal_ratio) {
			if lt($y 0) { +aimup }
			else { +aimdown }
		}
	}
	elif $_joystick_aiming {
		_joystick_aiming 0
		-aimleft; -aimright; -aimup; -aimdown
	}
}

function trigger_attack1 z {
	if gt($z 0) {
		_trigger_attacking1 1
		+attack1
	}
	elif $_trigger_attacking1 {
		_trigger_attacking1 0
		-attack1
	}
}

function trigger_attack2 z {
	if gt($z 0) {
		_trigger_attacking2 1
		+attack2
	}
	elif $_trigger_attacking2 {
		_trigger_attacking2 0
		-attack2
	}
}

//==============================================================================
// Default game controls
//==============================================================================

function default_binds {
	unbindall
	bind w "+up"
	bind a "+left"
	bind s "+down"
	bind d "+right"
	bind leftarrow "+aimleft"
	bind rightarrow "+aimright"
	bind uparrow "+aimup"
	bind downarrow "+aimdown"
	bind mlookleft "+aimleft"
	bind mlookright "+aimright"
	bind mlookup "+aimup"
	bind mlookdown "+aimdown"
	bind mouse1 "+attack1"
	bind mouse2 "+attack2"
	bind space "+attack1"
	bind lctrl "+attack2"
	bind lshift "+attack2"
	bind y "open_chat"
	bind u "open_teamchat"
	bind return "open_console"
	bind tab "+showscores"
	bind esc "settings"
	bind f10 "quit"
	bind kp_1 "class scout"
	bind kp_2 "class soldier"
	bind kp_3 "class pyro"
	bind kp_4 "class demoman"
	bind kp_5 "class heavy"
	bind kp_6 "class engineer"
	bind kp_7 "class medic"
	bind kp_8 "class sniper"
	bind kp_9 "class spy"
	bind m "team_menu"
	bind , "class_menu"
	bind f12 "screenshot"
	bind joy_axis_0 "joystick_move joystick_axis(0) joystick_axis(1)" // Left stick X
	bind joy_axis_1 "joystick_move joystick_axis(0) joystick_axis(1)" // Left stick Y
	bind joy_axis_2 "joystick_aim joystick_axis(2) joystick_axis(3)" // Right stick X
	bind joy_axis_3 "joystick_aim joystick_axis(2) joystick_axis(3)" // Right stick Y
	bind joy_axis_4 "trigger_attack2 joystick_axis(4)" // Left trigger.
	bind joy_axis_5 "trigger_attack1 joystick_axis(5)" // Right trigger.
	bind joy_button_0 "+aimdown" // A
	bind joy_button_1 "+aimright" // B
	bind joy_button_2 "+aimleft" // X
	bind joy_button_3 "+aimup" // Y
	bind joy_button_4 "+showscores" // Select
	bind joy_button_6 "settings" // Start
	bind joy_button_9 "+attack2" // Left bumper
	bind joy_button_10 "+attack1" // Right bumper
	bind joy_button_11 "+up" // D-pad up
	bind joy_button_12 "+down" // D-pad down
	bind joy_button_13 "+left" // D-pad left
	bind joy_button_14 "+right" // D-pad right
}

//==============================================================================
// Server-side game command handlers
//==============================================================================

function handle_noclip ip ... {
	if $sv_cheats {
		try {
			const id mp_get_player_id_by_ip($ip)
			mp_set_player_noclip $id not(mp_get_player_noclip($id))
		}
		catch {
			sv_write_error $ip "noclip: Player not found."
		}
	}
	else {
		sv_write_error $ip "noclip: Cheats are disabled."
	}
}

function handle_hurtme ip ... {
	if eq(size(@) 2) {
		if $sv_cheats {
			try {
				const id mp_get_player_id_by_ip($ip)
				try {
					mp_hurt_player $id @(1)
				}
				catch {
					sv_write_error $ip concat("hurtme: " $error)
				}
			}
			catch {
				sv_write_error $ip "hurtme: Player not found."
			}
		}
		else {
			sv_write_error $ip "hurtme: Cheats are disabled."
		}
	}
	else {
		sv_write_error $ip "Usage: hurtme <damage>"
	}
}

function handle_kill ip ... {
	try {
		const id mp_get_player_id_by_ip($ip)
		mp_kill_player $id
	}
	catch {
		sv_write_error $ip "kill: Player not found."
	}
}

function handle_rtv ip ... {
	if $sv_rtv_enable {
		sv_rtv $ip
	}
	else {
		sv_write_error $ip "rtv: RTV is disabled on this server."
	}
}

function handle_motd ip ... {
	sv_write_output $ip $sv_motd
}

function handle_points ip ... {
	try {
		const inventory_id mp_get_player_inventory_id(mp_get_player_id_by_ip($ip))
		sv_write_output $ip sv_inventory_get_points($inventory_id)
	}
	catch {
		sv_write_error $ip "points: Failed to get inventory."
	}
}

function handle_level ip ... {
	try {
		const inventory_id mp_get_player_inventory_id(mp_get_player_id_by_ip($ip))
		sv_write_output $ip sv_inventory_get_level($inventory_id)
	}
	catch {
		sv_write_error $ip "level: Failed to get inventory."
	}
}

function handle_hats ip ... {
	try {
		const inventory_id mp_get_player_inventory_id(mp_get_player_id_by_ip($ip))
		sv_write_output $ip sv_inventory_get_hats($inventory_id)
	}
	catch {
		sv_write_error $ip "hats: Failed to get inventory."
	}
}

function handle_teleport ip ... {
	if eq(size(@) 3) {
		if $sv_cheats {
			try {
				const id mp_get_player_id_by_ip($ip)
				try {
					mp_teleport_player $id @(1) @(2)
				}
				catch {
					sv_write_error $ip concat("teleport: " $error)
				}
			}
			catch {
				sv_write_error $ip "teleport: Player not found."
			}
		}
		else {
			sv_write_error $ip "teleport: Cheats are disabled."
		}
	}
	else {
		sv_write_error $ip "Usage: teleport <x> <y>"
	}
}

function handle_getpos ip ... {
	if eq(size(@) 1) {
		try {
			const id mp_get_player_id_by_ip($ip)
			try {
				sv_write_output $ip concat("x=" mp_get_player_x($id) ", y=" mp_get_player_y($id))
			}
			catch {
				sv_write_error $ip concat("getpos: " $error)
			}
		}
		catch {
			sv_write_error $ip "getpos: Player not found."
		}
	}
	else {
		sv_write_error $ip "Usage: getpos"
	}
}

table default_server_command_handler_functions {
	"noclip"	handle_noclip
	"hurtme"	handle_hurtme
	"kill"		handle_kill
	"rtv"		handle_rtv
	"motd"		handle_motd
	"points"	handle_points
	"level"		handle_level
	"hats"		handle_hats
	"teleport"	handle_teleport
	"getpos"	handle_getpos
}

function default_server_command_handler ip command ... {
	if contains(default_server_command_handler_functions $command) {
		default_server_command_handler_functions($command) $ip $command @...
		return 1 // Successfully handled command.
	}
	return 0 // Failed to handle command.
}

function default_on_server_receive_command ip command ... {
	if not(default_server_command_handler($ip $command @...)) {
		sv_write_error $ip concat("Unknown server command: \"" $command "\".")
	}
}

function on_server_receive_command ... {
	default_on_server_receive_command @...
}

} // end export script

//==============================================================================
// Start game
//==============================================================================

// Apply default game controls if everything is unbound.
if allunbound() {
	default_binds
}

// Print welcome message.
echo $game_name $game_version
echo "Copyright (C)" $game_year $game_author

// Play startup music.
if not($headless) {
	wait // Wait until next frame before playing music to make sure the volume settings have been applied.
	play_music "gamestartup2.ogg" 25
}
