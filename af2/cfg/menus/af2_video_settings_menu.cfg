import file menus/af2_menu
import file lib/gui

// Running this file toggles the menu.
if menu_is_active("video") {
	// Save the settings.
	host_writeconfig
	
	// Remove the menu.
	menu_pop "video"
}
else {
	menu_begin "video"

	// Element ids.
	const id_screen menu_new_id()
	const id_video_settings_text menu_new_id()

	const id_back_button menu_new_id()

	const id_r_showfps_text menu_new_id()
	const id_r_showfps_checkbox menu_new_id()

	const id_r_vsync_text menu_new_id()
	const id_r_vsync_checkbox menu_new_id()

	const id_fps_max_text menu_new_id()
	const id_fps_max_slider menu_new_id()
	const id_fps_max_input menu_new_id()

	const id_r_background_color_text menu_new_id()
	const id_r_background_color_input menu_new_id()

	const id_shader_text menu_new_id()
	const id_shader_dropdown menu_new_id()

	const id_fullscreen_text menu_new_id()
	const id_fullscreen_checkbox menu_new_id()

	const id_width_text menu_new_id()
	const id_width_input menu_new_id()

	const id_height_text menu_new_id()
	const id_height_input menu_new_id()

	const id_resolution_text menu_new_id()
	const id_resolution_dropdown menu_new_id()

	const id_reset_button menu_new_id()

	const id_easter_egg_button menu_new_id()
	
	// Utility functions.
	function get_resolution_width resolution {
		return substr($resolution 0 strfind($resolution "x"))
	}

	function get_resolution_height resolution {
		return substr($resolution add(strfind($resolution "x") 1))
	}

	function get_display_mode_resolution mode {
		const begin add(strfind($mode ". ") 2)
		const end strfind($mode "px")
		return substr($mode $begin sub($end $begin))
	}

	function get_display_mode_bpp mode {
		const begin add(strfind($mode "px ") 3)
		const end strfind($mode "bpp")
		return substr($mode $begin sub($end $begin))
	}

	function get_display_mode_refresh_rate mode {
		const begin add(strfind($mode "bpp ") 4)
		const end strfind($mode "Hz")
		return substr($mode $begin sub($end $begin))
	}

	// Common resolutions.
	array resolutions {
		"Custom"
		"7680x4320"
		"4096x2160"
		"3840x2160"
		"2560x1440"
		"1920x1080"
		"1600x900"
		"1366x768"
		"1280x720"
		"1152x648"
		"1024x576"
		"826x732" // Default resolution.
		"2048x1536"
		"1920x1440"
		"1856x1392"
		"1600x1200"
		"1440x1080"
		"1400x1050"
		"1280x960"
		"1024x768"
		"960x720"
		"800x600"
		"640x480"
	}

	// Remove resolutions that are bigger than the user's desktop resolution.
	scope {
		const desktop_size r_desktop_size() // This call is expensive, so we only do it once.
		const desktop_w get_resolution_width($desktop_size)
		const desktop_h get_resolution_height($desktop_size)
		var i 1
		while {lt $i size(resolutions)} {
			const resolution resolutions($i)
			if or(gt(get_resolution_width($resolution) $desktop_w) gt(get_resolution_height($resolution) $desktop_h)) {
				delete resolutions $i
			}
			else {
				i add($i 1)
			}
		}
	}

	function find_resolution_index {
		const i find_index(resolutions $r_size)
		if lt($i size(resolutions)) {
			return $i
		}
		return 0
	}

	// Determine supported fullscreen modes.
	table fullscreen_modes
	array supported_fullscreen_modes $r_fullscreen_list
	for i 0 size(supported_fullscreen_modes) {
		const mode supported_fullscreen_modes($i)
		const resolution get_display_mode_resolution($mode)
		if contains(resolutions $resolution) {
			if not(contains(fullscreen_modes $resolution)) {
				fullscreen_modes $resolution add($i 1)
			}
			else {
				// Replace the previous mode only if this mode is better.
				const bpp get_display_mode_bpp($mode)
				const refresh_rate get_display_mode_refresh_rate($mode)

				const prev_mode supported_fullscreen_modes(sub(fullscreen_modes($resolution) 1))
				const prev_bpp get_display_mode_bpp($prev_mode)
				const prev_refresh_rate get_display_mode_refresh_rate($prev_mode)
				
				if or(gt($bpp $prev_bpp) and(eq($bpp $prev_bpp) gt($refresh_rate $prev_refresh_rate))) {
					fullscreen_modes $resolution add($i 1)
				}
			}
		}
	}

	function make_fullscreen resolution {
		if contains(fullscreen_modes $resolution) {
			r_fullscreen_mode fullscreen_modes($resolution)
		}
		elif and(eq($r_fullscreen_mode 0) gt(size(fullscreen_modes) 0)) {
			r_fullscreen_mode 1
		}
		else {
			gui_set_value $id_fullscreen_checkbox 0
			r_fullscreen_mode 0
			r_size $resolution
			throw concat($resolution " is not a supported fullscreen resolution.")
		}
	}

	function on_fullscreen_checkbox_changed {
		if gui_get_value($id_fullscreen_checkbox) {
			make_fullscreen $r_size
		}
		else {
			r_fullscreen_mode 0
		}
	}

	function on_resolution_dropdown_changed {
		const index gui_get_value($id_resolution_dropdown)
		var resolution
		if eq($index 0) {
			resolution concat(gui_get_text($id_width_input) "x" gui_get_text($id_height_input))
		}
		else {
			resolution resolutions($index)
		}
		if gui_get_value($id_fullscreen_checkbox) {
			make_fullscreen $resolution
		}
		else {
			r_size $resolution
		}
	}

	function on_background_color_changed {
		const color gui_get_text($id_r_background_color_input)
		if streq($color "White") {
			reset r_background_color
			gui_set_text $id_r_background_color_input $r_background_color
			throw "The background color cannot be the same as the foreground color."
		}
	}

	array shaders {
		"Default"
		"Warped"
		"Retro"
	}

	array shader_filenames {
		"default.vert"
		"warped.vert"
		"retro.vert"
	}

	function find_shader_index {
		const i find_index(shader_filenames $r_shader_vert)
		if lt($i size(shaders)) {
			return $i
		}
		return 0
	}

	function on_shader_dropdown_changed {
		const index gui_get_value($id_shader_dropdown)
		r_shader_vert shader_filenames($index)
		if eq($index 2) {
			r_font "unscii/unscii-8.ttf"
			r_font_match_size_coefficient 0.9
			r_background_color "5 7 5"
		}
		else {
			reset r_font
			reset r_font_match_size_coefficient
			r_background_color "Black"
		}
		gui_set_text $id_r_background_color_input $r_background_color
	}

	// Save menu data for use in the on_window_resize callback.
	scope {
		table data
		data "id_fullscreen_checkbox" $id_fullscreen_checkbox
		data "id_resolution_dropdown" $id_resolution_dropdown
		data "id_width_input" $id_width_input
		data "id_height_input" $id_height_input
		data "resolutions" $resolutions
		menu_set_data $data
	}

	// Exported window resize callback, assuming this file will be imported to the global scope.
	export function on_window_resize {
		import file menus/af2_menu
		if streq(menu_name() "video") {
			table data menu_get_data()
			const id_fullscreen_checkbox data("id_fullscreen_checkbox")
			const id_resolution_dropdown data("id_resolution_dropdown")
			const id_width_input data("id_width_input")
			const id_height_input data("id_height_input")
			array resolutions data("resolutions")
			var i find_index(resolutions $r_size)
			if ge($i size(resolutions)) {
				i 0
			}
			gui_set_value $id_resolution_dropdown $i
			gui_set_value $id_fullscreen_checkbox ne($r_fullscreen_mode 0)
			gui_set_text $id_width_input $r_width
			gui_set_text $id_height_input $r_height
		}
	}

	const fps_limit_min 0
	const fps_limit_max 400
	const fps_limit_delta 0.01

	function reset_to_defaults {
		reset r_showfps
		reset r_vsync
		reset fps_max
		reset r_background_color
		reset r_fullscreen_mode
		reset r_width
		reset r_height
		reset r_shader_vert
		reset r_shader_frag
		reset r_font
		reset r_font_match_size_coefficient
		gui_set_value $id_r_showfps_checkbox $r_showfps
		gui_set_value $id_r_vsync_checkbox $r_vsync
		gui_set_value $id_fps_max_slider div(sub($fps_max $fps_limit_min) sub($fps_limit_max $fps_limit_min))
		gui_set_text $id_fps_max_input $fps_max
		gui_set_text $id_r_background_color_input $r_background_color
		gui_set_value $id_shader_dropdown find_shader_index()
		gui_set_value $id_fullscreen_checkbox ne($r_fullscreen_mode 0)
		gui_set_text $id_width_input $r_width
		gui_set_text $id_height_input $r_height
		gui_set_value $id_resolution_dropdown find_resolution_index()
	}
	
	// Element layout.
	// command                  id                            x  y   w  h  color  text                      function                                                association
	gui_screen_file             $id_screen                    0  0         white  "menu_background.txt"
	gui_text                    $id_video_settings_text       3  3         white  "Video settings"
	
	gui_button                  $id_back_button               3  6   11 5  white  "<- Back"                 {video_settings}
	
	gui_text                    $id_r_showfps_text            7  13        white  "Show FPS"
	gui_cvar_checkbox           $id_r_showfps_checkbox        3  13  3  1  white                            r_showfps

	gui_text                    $id_r_vsync_text              7  15        white  "Enable V-Sync"
	gui_cvar_checkbox           $id_r_vsync_checkbox          3  15  3  1  white                            r_vsync

	gui_text                    $id_fps_max_text              3  18        white  "FPS limit"
	gui_cvar_slider_with_input  $id_fps_max_slider            3  19  13 1  white                            fps_max $fps_limit_min $fps_limit_max $fps_limit_delta  $id_fps_max_input
	gui_cvar_input_with_slider  $id_fps_max_input             17 18  7  3  white                            fps_max $fps_limit_min $fps_limit_max                   $id_fps_max_slider
	
	gui_text                    $id_r_background_color_text   33 3         white  "Background color"
	gui_cvar_input_callback     $id_r_background_color_input  32 4   20 3  white                            r_background_color                                      {on_background_color_changed}
	
	gui_text                    $id_shader_text               33 8         white  "Shader"
	gui_dropdown                $id_shader_dropdown           32 9   12 1  white  find_shader_index()       {on_shader_dropdown_changed}                            shaders...

	gui_text                    $id_fullscreen_text           36 15        white  "Fullscreen"
	gui_checkbox                $id_fullscreen_checkbox       32 15  3  1  white  ne($r_fullscreen_mode 0)  {on_fullscreen_checkbox_changed}
	
	gui_text                    $id_width_text                33 17        white  "Width"
	gui_cvar_input              $id_width_input               32 18  9  3  white                            r_width
	
	gui_text                    $id_height_text               44 17        white  "Height"
	gui_cvar_input              $id_height_input              43 18  9  3  white                            r_height
	
	gui_text                    $id_resolution_text           33 22        white  "Preset"
	gui_dropdown                $id_resolution_dropdown       32 23  14 1  white  find_resolution_index()   {on_resolution_dropdown_changed}                        resolutions...
	
	gui_button                  $id_reset_button              3  22  21 5  white  "Reset to defaults"       {reset_to_defaults}

	gui_button                  $id_easter_egg_button         50 26  2  1  black  ":)"                      {if not(streq($r_background_color "Black")) { r_shader_vert "wavy.vert" }}

	// Add the menu.
	gui_push_menu --on_select_none {open_console} --on_escape {video_settings} \
		$id_back_button \
		$id_r_showfps_checkbox \
		$id_r_vsync_checkbox \
		$id_fps_max_slider \
		$id_fps_max_input \
		$id_r_background_color_input \
		$id_shader_dropdown \
		$id_fullscreen_checkbox \
		$id_width_input \
		$id_height_input \
		$id_resolution_dropdown \
		$id_reset_button \
		$id_easter_egg_button
}
