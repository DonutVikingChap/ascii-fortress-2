// Gamemode by Donut the Vikingchap.
// http://steamcommunity.com/id/donutvikingchap

export script {

const map_w 53
const map_h 27
const paddle_h 7
const map_w_half floor(div($map_w 2))
const map_h_half floor(div($map_h 2))
const paddle_h_half floor(div($paddle_h 2))

const red_paddle_start_x 5
const red_paddle_start_y $map_h_half

const blue_paddle_start_x sub($map_w 6)
const blue_paddle_start_y $map_h_half

const red_team_id mp_get_team_id_by_name("red")
const blue_team_id mp_get_team_id_by_name("blue")

const red_paddle_matrix "]\n]\n]\n]\n]\n]\n]"
const blue_paddle_matrix "[\n[\n[\n[\n[\n[\n["
const ball_matrix "O"
const ball_color "light_gray"

const trail_length 6
const trail_matrices "---++ "
array trail_colors {
	"20 20 20"
	"40 40 40"
	"60 60 60"
	"80 80 80"
	"100 100 100"
	"0 0 0"
}

const ball_offset_coefficient 0.3
const ball_speed_increase_coefficient 1.1
const max_dx 3
const max_dy 3
const max_dt 0.15
const min_speed 15
const max_speed 50

const player_move_interval 0.05
const start_delay_load 10
const start_delay_score 3

const score_limit 10

var red_score_id
var blue_score_id
var red_paddle_id
var blue_paddle_id
var ball_id
array trail_ids
var trail_index 0

var red_score
var blue_score

var ball_dx
var ball_dy

var latest_joined_player_id 0
var prev_ball_paddle_id 0
var time_until_ball_move
var time_until_paddle_move

function update_ball_velocity {
	// Get the desired speed and clamp it to max_speed.
	var speed hypot($ball_dx $ball_dy)
	if gt($speed $max_speed) {
		ball_dx mul($max_speed div($ball_dx $speed))
		ball_dy mul($max_speed div($ball_dy $speed))
		speed $max_speed
	}
	
	// Find a reasonable movement delta (trying to minimize the visible gap).
	var dx $ball_dx
	var dy $ball_dy
	if lt(abs($dx) abs($dy)) {
		if eq($dx 0) {
			dy sgn($dy)
		}
		else {
			dx sgn($ball_dx)
			dy round(mul($dx div($ball_dy $ball_dx)))
		}
	}
	else {
		if eq($dy 0) {
			dx sgn($dx)
		}
		else {
			dy sgn($ball_dy)
			dx round(mul($dy div($ball_dx $ball_dy)))
		}
	}
	if gt(abs($dx) $max_dx) {
		dx sgn($dx)
		dy 0
	}
	
	// Calculate a move interval that achieves the desired speed given the movement delta.
	var dt div(hypot($dx $dy) $speed)

	// Clamp the move interval to max_dt.
	dt min($dt $max_dt)
	
	// Update the entity.
	mp_set_ent_move $ball_id $dx $dy
	mp_set_ent_move_interval $ball_id $dt
}

table old_cvar_values

function set_cvar cvar value {
	old_cvar_values $cvar $$cvar
	$cvar $value
}

function on_map_start {
	set_cvar mp_round_end_time 5 // Start the new round a bit quicker.
	set_cvar mp_enable_round_time 0 // We control the round time manually.
	set_cvar mp_player_respawn_time 0 // Instantly respawn players.
	set_cvar mp_class_move_interval_scout $player_move_interval // Set move speed.
	set_cvar mp_weapon_ammo_per_clip_scattergun 0 // Make players unable to shoot.
	// Limit class to scout only.
	set_cvar mp_class_limit_scout 99999
	set_cvar mp_class_limit_soldier 0
	set_cvar mp_class_limit_pyro 0
	set_cvar mp_class_limit_demoman 0
	set_cvar mp_class_limit_heavy 0
	set_cvar mp_class_limit_engineer 0
	set_cvar mp_class_limit_medic 0
	set_cvar mp_class_limit_sniper 0
	set_cvar mp_class_limit_spy 0
}

function on_map_end {
	foreach cvar old_cvar_values {
		$cvar old_cvar_values($cvar)
	}
}

function reset_ball start_delay {
	prev_ball_paddle_id 0
	mp_teleport_ent $ball_id $map_w_half $map_h_half
	mp_set_ent_move $ball_id 0 0
	foreach trail_id trail_ids {
		mp_teleport_ent $trail_id $map_w_half $map_h_half
	}
	trail_index 0
	time_until_ball_move $start_delay
	mp_set_round_time $start_delay
}

function on_round_reset {
	mp_delete_ent $red_score_id
	mp_delete_ent $blue_score_id
	mp_delete_ent $red_paddle_id
	mp_delete_ent $blue_paddle_id
	mp_delete_ent $ball_id
	foreach trail_id trail_ids {
		mp_delete_ent $trail_id
	}
	clear trail_ids
	trail_index 0
}

function on_round_start {
	// Spawn red score.
	red_score_id mp_create_ent(15 4)
	mp_set_ent_color $red_score_id "team_red"
	
	// Spawn blue score.
	blue_score_id mp_create_ent(sub($map_w 16) 4)
	mp_set_ent_color $blue_score_id "team_blue"
	
	// Spawn red paddle.
	red_paddle_id mp_create_ent($red_paddle_start_x sub($red_paddle_start_y $paddle_h_half))
	mp_set_ent_matrix $red_paddle_id $red_paddle_matrix
	mp_set_ent_color $red_paddle_id "team_red"
	mp_set_ent_solid_to_world $red_paddle_id 1
	mp_set_ent_solid_to_ent $red_paddle_id 1
	
	// Spawn blue paddle.
	blue_paddle_id mp_create_ent($blue_paddle_start_x sub($blue_paddle_start_y $paddle_h_half))
	mp_set_ent_matrix $blue_paddle_id $blue_paddle_matrix
	mp_set_ent_color $blue_paddle_id "team_blue"
	mp_set_ent_solid_to_world $blue_paddle_id 1
	mp_set_ent_solid_to_ent $blue_paddle_id 1
	
	// Spawn trail.
	for i 0 $trail_length {
		push trail_ids mp_create_ent($map_w_half $map_h_half)
	}

	// Spawn ball.
	ball_id mp_create_ent($map_w_half $map_h_half)
	mp_set_ent_matrix $ball_id $ball_matrix
	mp_set_ent_color $ball_id $ball_color
	mp_set_ent_solid_to_world $ball_id 1
	mp_set_ent_solid_to_ent $ball_id 1
	
	red_score 0
	blue_score 0
	mp_set_ent_matrix $red_score_id $red_score
	mp_set_ent_matrix $blue_score_id $blue_score
	reset_ball $start_delay_load
	
	time_until_paddle_move 0
}

function on_player_join player_id {
	if mp_is_player_bot($player_id) {
		bot_kick mp_get_player_name($player_id)
		mp_write_chat "NOTE: Bots are not supported in this game mode!"
	}
	else {
		latest_joined_player_id $player_id
	}
}

function on_team_select player_id {
	mp_write_chat_player $player_id "============================================"
	mp_write_chat_player $player_id concat("Welcome to " $map_name "!")
	mp_write_chat_player $player_id "Move up and down to move your team's paddle."
	mp_write_chat_player $player_id "The paddle moves to your team's average y."
	mp_write_chat_player $player_id "If only RED has players, you can use attack1"
	mp_write_chat_player $player_id "and attack2 to move the BLU paddle!"
	mp_write_chat_player $player_id "============================================"
}

function on_post_tick delta_time {
	var total_red_y 0
	var total_red_count 0
	
	var total_blue_y 0
	var total_blue_count 0

	// Accumulate red/blue players' y coordinates and count the number of red/blue players.
	array players mp_player_list()
	foreach player_id players {
		if eq(mp_get_player_team($player_id) $red_team_id) {
			total_red_y add($total_red_y mp_get_player_y($player_id))
			total_red_count add($total_red_count 1)
		}
		elif eq(mp_get_player_team($player_id) $blue_team_id) {
			total_blue_y add($total_blue_y mp_get_player_y($player_id))
			total_blue_count add($total_blue_count 1)
		}
	}
	
	// Move red paddle.
	if ne($total_red_count 0) {
		const average_red_y round(div($total_red_y $total_red_count))
		try {
			mp_teleport_ent $red_paddle_id mp_get_ent_x($red_paddle_id) sub($average_red_y $paddle_h_half)
		}
		catch {}
	}
	
	// Move blue paddle.
	if ne($total_blue_count 0) {
		const average_blue_y round(div($total_blue_y $total_blue_count))
		try {
			mp_teleport_ent $blue_paddle_id mp_get_ent_x($blue_paddle_id) sub($average_blue_y $paddle_h_half)
		}
		catch {}
	}
	elif mp_has_player($latest_joined_player_id) {
		time_until_paddle_move sub($time_until_paddle_move $delta_time)
		if le($time_until_paddle_move 0) {
			time_until_paddle_move 0
			if mp_get_player_attack1($latest_joined_player_id) {
				try {
					mp_teleport_ent $blue_paddle_id mp_get_ent_x($blue_paddle_id) add(mp_get_ent_y($blue_paddle_id) -1)
					time_until_paddle_move $player_move_interval
				}
				catch {}
			}
			if mp_get_player_attack2($latest_joined_player_id) {
				try {
					mp_teleport_ent $blue_paddle_id mp_get_ent_x($blue_paddle_id) add(mp_get_ent_y($blue_paddle_id) 1)
					time_until_paddle_move $player_move_interval
				}
				catch {}
			}
		}
	}
	
	// Update round start timer.
	if and(gt($time_until_ball_move 0) $sv_has_players) {
		time_until_ball_move sub($time_until_ball_move $delta_time)
		if le($time_until_ball_move 0) {
			mp_set_round_time 0
			const min_speed_half div($min_speed 2)
			ball_dy random_float(neg($min_speed_half) $min_speed_half)
			if random_int(0 1) {
				ball_dx $min_speed
			}
			else {
				ball_dx neg($min_speed)
			}
			update_ball_velocity
			mp_play_game_sound "shoot_syringe"
		}
		else {
			mp_set_round_time $time_until_ball_move
		}
	}
}

function on_collide_ent_world ent_id normal_x normal_y {
	if eq($ent_id $ball_id) {
		const ball_x mp_get_ent_x($ent_id)
		const ball_y mp_get_ent_y($ent_id)
		if lt($ball_x mp_get_ent_x($red_paddle_id)) {
			// Collided behind red paddle; blue scores.
			reset_ball $start_delay_score
			mp_play_game_sound "player_death"
			blue_score add($blue_score 1)
			mp_set_ent_matrix $blue_score_id $blue_score
			if ge($blue_score $score_limit) {
				mp_end_round $blue_team_id
			}
		}
		elif gt($ball_x mp_get_ent_x($blue_paddle_id)) {
			// Collided behind blue paddle; red scores.
			reset_ball $start_delay_score
			mp_play_game_sound "player_death"
			red_score add($red_score 1)
			mp_set_ent_matrix $red_score_id $red_score
			if ge($red_score $score_limit) {
				mp_end_round $red_team_id
			}
		}
		else {
			// Bounce against wall.
			prev_ball_paddle_id 0
			if ne($normal_x 0) {
				ball_dx neg($ball_dx)
			}
			if ne($normal_y 0) {
				ball_dy neg($ball_dy)
			}
			update_ball_velocity
			mp_play_game_sound "shoot_syringe"
		}
	}
}

function collide_ball_paddle paddle_id {
	if ne($paddle_id $prev_ball_paddle_id) {
		// Bounce against paddle.
		prev_ball_paddle_id $paddle_id
		
		const paddle_y_middle add(mp_get_ent_y($paddle_id) $paddle_h_half)
		const offset sub(mp_get_ent_y($ball_id) $paddle_y_middle)
		
		ball_dx neg($ball_dx)
		ball_dy add($ball_dy mul(abs($ball_dx) mul($offset $ball_offset_coefficient)))
				
		ball_dx mul($ball_dx $ball_speed_increase_coefficient)
		ball_dy mul($ball_dy $ball_speed_increase_coefficient)
		
		update_ball_velocity
		mp_play_game_sound "shoot_syringe"
	}
}

function on_collide_ent_ent ent_id_a ent_id_b {
	if eq($ent_id_a $ball_id) {
		if or(eq($ent_id_b $red_paddle_id) eq($ent_id_b $blue_paddle_id)) {
			collide_ball_paddle $ent_id_b
		}
	}
	elif eq($ent_id_b $ball_id) {
		if or(eq($ent_id_a $red_paddle_id) eq($ent_id_a $blue_paddle_id)) {
			collide_ball_paddle $ent_id_a
		}
	}
}

function on_ent_step ent_id x y {
	if eq($ent_id $ball_id) {
		// Update the trail.
		const trail_id trail_ids($trail_index)
		mp_teleport_ent $trail_id $x $y

		trail_index add($trail_index 1)
		if ge($trail_index $trail_length) {
			trail_index 0
		}
		
		for offset 0 $trail_length {
			const i mod(add($trail_index $offset) $trail_length)
			const trail_id trail_ids($i)
			mp_set_ent_matrix $trail_id char_at($trail_matrices $offset)
			mp_set_ent_color $trail_id trail_colors($offset)
		}
	}
}

} // end export script
